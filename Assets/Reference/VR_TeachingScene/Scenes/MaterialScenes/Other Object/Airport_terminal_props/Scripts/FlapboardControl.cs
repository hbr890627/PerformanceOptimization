using UnityEngine;
using System.Collections;

public class FlapboardControl : MonoBehaviour {
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------

    public Texture2D lettersTexture;
    public Texture2D boardTexture;

    int[] lineText;
    int[] destLineText;

    int[] flight;
    int[] destination;
    int[] remark;
    
    bool[] lineUpdated;

    float messageTimer;

//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
string[] flugnummerText = // 65
{
    "EZ/0137",
    "EZ/2122",
    "EZ/9382",
    "EZ/1583",
    "EZ/3156",
    "EZ/9400",
    "EZ/3812",
    "EZ/4701",
    
    "UV/0137",
    "UV/2122",
    "UV/9382",
    "UV/1583",
    "UV/3156",
    "UV/9400",
    "UV/3812",
    "UV/4701",

    "FV/0137",
    "FV/2122",
    "FV/9382",
    "FV/1583",
    "FV/3156",
    "FV/9400",
    "FV/3812",
    "FV/4701",

    "SU/0137",
    "SU/2122",
    "SU/9382",
    "SU/1583",
    "SU/3156",
    "SU/9400",
    "SU/3812",
    "SU/4701",

    "FR/ 137",
    "FR/ 122",
    "FR/ 382",
    "FR/ 583",
    "FR/ 156",
    "FR/ 400",
    "FR/ 812",
    "FR/ 701",
    
    "XJ/ 137",
    "XJ/ 122",
    "XJ/ 382",
    "XJ/ 583",
    "XJ/ 156",
    "XJ/ 400",
    "XJ/ 812",
    "XJ/ 701",

    "AB/ 137",
    "AB/ 122",
    "AB/ 382",
    "AB/ 583",
    "AB/ 156",
    "AB/ 400",
    "AB/ 812",
    "AB/ 701",

    "CW/ 137",
    "CW/ 122",
    "CW/ 382",
    "CW/ 583",
    "CW/ 156",
    "CW/ 400",
    "CW/ 812",
    "CW/ 701",
};

string[] zielortText =    // 16
{
    "LISSABON    ",
    "STPETERSBURG",   
    "DUBLIN      ",
    "LONDON      ",
    "NEW YORK    ",
    "BERLIN      ",
    "FRANKFURT   ",
    "SPLIT       ",
    "ZAGREB      ",
    "MADRID      ",
    "BARCELONA   ",
    "STUTTGART   ",
    "DUESSELDORF ",
    "MOSKAU      ",
    "AMSTERDAMM  ",
    "ROM         ",
};

string[] statusText = // 6
{
    "ON TIME ",    
    "LANDING ",
    "DELAYED ",
    "CHECK IN",
    "BOARDING",
    "TAKE OFF",
};

    
    
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
void Awake()
{
    lineText = new int[32 * 16];
    destLineText = new int[32 * 16];
    lineUpdated = new bool[16];

    flight = new int[16];
    destination = new int[16];
    remark = new int[16];
}
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
void Start()
{
    int i;
    for(i=0;i<(32*16);i++)  // blank board
        lineText[i] = 0;    

    for(i=0;i<16;i++)
    {
        createTextLine(i);
        for(int x=0;x<32;x++)
            lineText[i * 32 + x] = destLineText[i * 32 + x];
        renderLine(i);
    }

    boardTexture.Apply();
}
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
void renderLine(int line)
{
    int x;
    for(x=0;x<32;x++)
        boardTexture.SetPixels(x * 16, (15 - line) * 32, 16, 32, lettersTexture.GetPixels( ((lineText[line * 32 + x] >> 3) * 16), ((7 - (lineText[line * 32 + x] & 0x07)) * 32), 16, 32) );
}
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
int getLetter(char chr)
{
    int ch = (int)chr;
    switch(ch)
    {
        case 32:{return 0;}      // space
        case 46:{return 37 * 8;} // .
        case 47:{return 39 * 8;} // /
        case 48:{return 1  * 8;} // 0
        case 49:{return 2  * 8;} // 1
        case 50:{return 3  * 8;} // 2
        case 51:{return 4  * 8;} // 3
        case 52:{return 5  * 8;} // 4
        case 53:{return 6  * 8;} // 5
        case 54:{return 7  * 8;} // 6
        case 55:{return 8  * 8;} // 7
        case 56:{return 9  * 8;} // 8
        case 57:{return 10 * 8;} // 9
        case 58:{return 38 * 8;} // :
        
    }
    if((ch >= 65) && (ch < 91))
        return (ch - 64 + 10) * 8;
    
    return 0;
}
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
void createTextLine(int line)
{
    int i;
    string text;

    //-- create message
    flight[line] = Random.Range(0,64);            
    destination[line] = Random.Range(0, 16);
    remark[line] = Random.Range(0,6);

    int timeMin  = Random.Range(0,60);
    int timeHour = Random.Range(0,24);

    //-- set time
    destLineText[line * 32 + 0] = (((timeHour / 10) % 10) + 1) * 8;
    destLineText[line * 32 + 1] = (((timeHour /  1) % 10) + 1) * 8;
    destLineText[line * 32 + 2] = (38 * 8);
    destLineText[line * 32 + 3] = (((timeMin /  10) % 10) + 1) * 8;
    destLineText[line * 32 + 4] = (((timeMin /   1) % 10) + 1) * 8;

    //-- set flight
    text = flugnummerText[flight[line]];
    for(i=0;i<7;i++)
        destLineText[line * 32 + 5 + i] = getLetter(text[i]);

    //-- set destination
    text = zielortText[destination[line]];
    for(i=0;i<12;i++)
        destLineText[line * 32 + 12 + i] = getLetter(text[i]);

    //-- set remark
    text = statusText[remark[line]];
    for(i=0;i<8;i++)
        destLineText[line * 32 + 24 + i] = getLetter(text[i]);
}
//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
bool Distance(Vector3 pos1, Vector3 pos2, float maxDist)
{
    float dist = (((pos1.x - pos2.x) * (pos1.x - pos2.x)) +
                  ((pos1.y - pos2.y) * (pos1.y - pos2.y)) +
                  ((pos1.z - pos2.z) * (pos1.z - pos2.z)));
    return dist < (maxDist * maxDist);
}
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
void Update()
{
    bool changesUpperBoard = false;
    bool changesLowerBoard = false;
    //-------------------------------------------------
    //-------------------------------------------------
    //-------------------------------------------------
    //
    // Update Lines
    //
    int i;
    for(i=0;i<16;i++)
        lineUpdated[i] = false;

    for(i=0;i<16;i++)
    {
        for(int x=0;x<32;x++)
        {
            if(lineText[i*32 + x] != destLineText[i*32 + x])
            {
                lineUpdated[i] = true;
                lineText[i*32 + x] = (lineText[i*32 + x] + 1) % 320;
            }
        }
        if(lineUpdated[i] == true)
            renderLine(i);
    }
    //-------------------------------------------------
    //-------------------------------------------------
    //-------------------------------------------------
    changesUpperBoard = lineUpdated[0] |
                        lineUpdated[1] |
                        lineUpdated[2] |
                        lineUpdated[3] |
                        lineUpdated[4] |
                        lineUpdated[5] |
                        lineUpdated[6] |
                        lineUpdated[7];

    changesLowerBoard = lineUpdated[8]  |
                        lineUpdated[9]  |
                        lineUpdated[10] |
                        lineUpdated[11] |
                        lineUpdated[12] |
                        lineUpdated[13] |
                        lineUpdated[14] |
                        lineUpdated[15];
    //-------------------------------------------------
    //-------------------------------------------------
    //-------------------------------------------------
    if((changesUpperBoard == false) && (changesLowerBoard == false))
    {
        messageTimer -= Time.deltaTime;
        if(messageTimer < 0.0f)
        {
            int rand = Random.Range(1, 5);
            for(i=0;i<rand;i++)
                createTextLine(Random.Range(0,16));

            messageTimer = Random.Range(3.0f, 10.0f);       
        }
    }
    //-------------------------------------------------
    //-------------------------------------------------
    //-------------------------------------------------
    //
    // Update Texture is needed
    //
    if( (changesUpperBoard == true) | (changesLowerBoard == true) )
        boardTexture.Apply();        
}
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------
}
